# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/Environments/12_MultipleObsSocialDilemma.ipynb.

# %% auto 0
__all__ = ['MultipleObsSocialDilemma']

# %% ../../nbs/Environments/12_MultipleObsSocialDilemma.ipynb 5
from .Base import ebase

from fastcore.utils import *
from fastcore.test import *

from .HeterogeneousObservationsEnv import HeterogeneousObservationsEnv

import numpy as np

# %% ../../nbs/Environments/12_MultipleObsSocialDilemma.ipynb 6
class MultipleObsSocialDilemma(HeterogeneousObservationsEnv):
    """
    Symmetric 2-agent 2-action Social Dilemma Matrix Game.
    """ 

    def __init__(self,
                 reward:float,  # reward of mutual cooperation
                 temptation:float,  # temptation of unilateral defection 
                 suckers_payoff:float,  # sucker's payoff of unilateral cooperation
                 punishment:float): # punsihment of mutual defection

        # TODO: these variables are expected to be already initialized in the parent class
        # causing a recursive calling and causing the dependency on them to fail
        # therefore we need to initialize them here
        self.n_agents = 2
        self.n_agent_actions = 2
        self.n_states = 1

        self.state = 0 # inital state
        super().__init__()

# %% ../../nbs/Environments/12_MultipleObsSocialDilemma.ipynb 7
@patch
def transition_tensor(self:MultipleObsSocialDilemma):
    """Calculate the Transition Tensor"""
    return np.ones((self.n_states, self.n_agent_actions, self.n_agent_actions, self.n_states))

@patch
def reward_tensor(self:MultipleObsSocialDilemma):
    """Get the Reward Tensor R[i,s,a1,...,aN,s']."""

    R = np.zeros((2, self.n_states, 2, 2, self.n_states))

    R[0, 0, :, :, 0] = [[self.reward , self.suckers_payoff],
                        [self.temptation , self.punishment]]
    R[1, 0, :, :, 0] = [[self.reward , self.temptation],
                        [self.suckers_payoff , self.punishment]]
    return R

@patch
def actions(self:MultipleObsSocialDilemma):
    """The action sets"""
    return [['c', 'd'] for _ in range(self.n_agents)]

@patch
def states(self:MultipleObsSocialDilemma):
    """The states set"""
    return ['.'] 

@patch
def id(self:MultipleObsSocialDilemma):
    """
    Returns id string of environment
    """
    # Default
    id = f"{self.__class__.__name__}_"+\
        f"{self.temptation}_{self.reward}_{self.punishment}_{self.suckers_payoff}"
    return id

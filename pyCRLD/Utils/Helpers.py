"""Collection of helper functions"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/Utils/99_UHelpers.ipynb.

# %% auto 0
__all__ = ['make_variable_vector', 'compute_stationarydistribution']

# %% ../../nbs/Utils/99_UHelpers.ipynb 3
import jax
import numpy as np
import jax.numpy as jnp
from jax import jit

# %% ../../nbs/Utils/99_UHelpers.ipynb 4
def make_variable_vector(variable,  # can be iterable or float or int
                         length:int  # length of the vector
                        ):  # vector
    "Turn a `variable` into a vector or check that `length` is consistent."
    if hasattr(variable, '__iter__'):
        assert len(variable) == length, 'Wrong number given'
        return jnp.array(variable)
    else:
        return jnp.repeat(variable, length)

# %% ../../nbs/Utils/99_UHelpers.ipynb 7
@jit
def compute_stationarydistribution(Tkk:jnp.ndarray):  # Transition matrix
    """Compute stationary distribution for transition matrix `Tkk`."""
    # eigenvectors
    oeival, oeivec = jnp.linalg.eig(Tkk.T)
    oeival = oeival.real
    oeivec = oeivec.real
    
    get_mask = lambda tol: jnp.abs(oeival - 1) < tol
  
    tolerances = jax.lax.map(lambda x: 0.1**x, jnp.arange(1,16,1))
    masks = jax.lax.map(get_mask, tolerances)
    ix = jnp.max(jnp.where(masks.sum(-1)>=1, jnp.arange(len(masks)), -1))
    mask = masks[ix]
    tol = tolerances[ix]
    
    # obtain stationary distribution
    meivec = jnp.where(mask, oeivec, -42)
    
    dist = meivec / meivec.sum(axis=0, keepdims=True)
    dist = jnp.where(dist < tol, 0, dist)
    dist = dist / dist.sum(axis=0, keepdims=True)
    
    return jnp.where(meivec==-42, -10, dist)
